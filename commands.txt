## Commands

Note:
git branch & git status both will show the branch name [current]

# Set user / email for git
git config user.name
git config user.email

# Set user / email for git
git config --global user.name "USER NAME"
git config --global user.email "USER EMAIL"

# Create repo 
- It works on the existing projects. Marks the current directory to tracked by git
- It creates ".git" folder
git init

# Check status
- It give current status of git. basically, it shows branch name & untracked files
git status

# Git workflow
git add, git commit

# Add files
- It add local files to staging area
- It will be save / update in objects folder & it will be create in index file
git add <FOLDER> <FILE>
git add .

# Commit files
- It add staged area [Objects folder + index file in ".git" folder] to repository
- It will update objects folder & index file, it will create new file called 'COMMIT_EDITMSG' & folder 'logs' & it will update 'git\refs\heads' with master file
git commit                          [Not Recommended]
git commit -m "commit message"      [Recommended]

- To replace the latest version of commit, use ammend
git commit --amend

# Add & Commit files
git commit -a -m "COMMIT MESSAGE"
git commit -am "COMMIT MESSAGE"

# Show History
- It will read all the committed files from 'logs' folder under '.git' folder
git log
git log --oneline  

# Git Branch
- it is the reference to the commit.
- it indicates the current branch
git branch
git branch -v

> Create branch
git branch <BRANCH NAME>

> Switch between branches
git switch <BRANCH NAME>
git checkout <BRANCH NAME>

> Create & Switch
git switch -c <NEW BRANCH NAME>

> Takes to last branch
git switch -

# Git Checkout
git checkout <BRANCH NAME>

> Go back in time & create new branch using commit id
git checkout <COMMIT ID> --> DETACHED HEAD
git switch -c <NEW BRANCH BASED ON COMMIT ID>

> Another way to get commits using HEAD~MINUS_COMMIT
git checkout HEAD~1

- To Return
git switch <BRANCH> --> TO RE_ATTACH

> Create branch
git checkout -b <BRANCH NAME>

> Delete branch
- If branch to delete is same as current branch. It will fail, so switch to other branch
- To delete local and remote repositories
git branch -d <EXISTING BRANCH NAME>

- To delete local repositories
git branch -D <EXISTING BRANCH NAME>

> Rename branch
- Make sure we are on same branch which needs to be renamed
git branch -m <NEW BRANCH NAME>

# Git Switch Vs Git Checkout
- git switch just focuses on branch switch where as git check along with branch it even restores the files of the branch
git switch [Recommnded]

# Git Merge
- we merge branches not commits
- Before we merge, we need to switch to base branch
git merge <BRANCH TO MERGE>

# Types 
- Fastforward Merge
- Non-Fastforward Merge

> Fastforward Merge
- Merge the branches where there are no conflicts
- It may be new files added

> Non-Fastforward Merge
- conflicts will be present in the file

# Git Difference
- Before we merge, we need to see the differences in files whether it can conflit
- compares staging area [Existing Files modified but not committed to branch] and current working directory
shows only files modified but not newly added files 
git diff

> Difference with HEAD
- It shows all the changes in staging area including newly added files
git diff HEAD
git diff HEAD [FILE]

> Show only staged changes
- It shows all files staging area which are newly added
git diff --staged
git diff --staged [FILE]

> Show only cached changes
- It shows all files staging area which are newly added
git diff --cached

> Direct branch
- It compares the branch with staged area
git branch <BRANCH NAME>

> Compare branches
- It compares two branches
git diff <BRANCH TO MERGE>..<BASE BRANCH>
git diff <BRANCH TO MERGE> <BASE BRANCH>

> Compare commits
- It compares two commits
git diff <ANY COMMIT>..<BASE COMMIT>
git diff <ANY COMMIT> <BASE COMMIT>

# Stashing
- It is the process of saving the uncommitted changes of one branch and save it. so that we can switch to another branch 
- It saves the work of current branch temporarily without commiting it
git stash save <MESSAGE> [= git stash]

> Show stashes
git stash list

> Remove from the stash & apply on working copy
- It basically takes the stashed changes & makes it avialable for commiting
git stash pop

> Keep in the stash & apply on working copy [Recommended When compared to pop operation]
- It basically takes the stashed changes and shows it
git stash apply
git stash apply stash@{id} --> id from stash list

> Delete Stash
- Remove specific stash if provided else starts with index 0
git stash drop 
git stash drop stash@{id} --> id from stash list

> Clear Stash
- Remove all the stashes
git stash clear 
